#!/usr/bin/perl -w
use strict;
use IPC::System::Simple qw(system systemx capture capturex);
use Cwd qw(realpath);
use YAML qw(LoadFile);
use autodie qw(open close chdir);
use Sys::Hostname;
use Getopt::Long;

my $git = '/usr/bin/git';
my $playbook = '/usr/bin/ansible-playbook';

# chdir, in case we're called from elsewhere...
my $kcdir = realpath($0);
$kcdir =~ s#/[^/]+$##;
chdir($kcdir);

my $force = 0;
GetOptions('force' => \$force);

# check if we're running on the primary node
if(!$force && !primary()) {
  die("Not running on primary node!\n\n".
       "Please use '--force' if you're sure you know what you're doing.\n\n");
}

# add critical stuff
systemx($git, 'add', 'vm-config');

# commit first. user will have edited stuff if they run this.
systemx($git, 'commit', '--allow-empty', '-am',
	'automatic commit starting kiss-configure');

# fetch the HEAD hashes from both repos.
systemx($git, 'fetch', '--all');
my($commit, $H);

open($H, "<", ".git/FETCH_HEAD");
while(<$H>) {
  /^([\da-f]+)\s+/ || die "bad line in FETCH_HEAD:$.\n";
  if(defined $commit && $1 ne $commit) {
    die "Not all repos have the same HEAD commit, fix manually!\n";
  } else {
    $commit = $1;
  }
}

# git merge
systemx($git, 'merge');

# dinge machen
systemx($playbook, 'kiss-configure.yml');

# add critical stuff once more (vm-config/cluster.yml could have appearedd)
systemx($git, 'add', 'vm-config');

# git commit
systemx($git, 'commit', '--allow-empty', '-am',
	'automatic commit ending kiss-configure');
# git push origin master (pusht auf beide, soweit online)
systemx($git, 'push', 'origin',  'master');




sub primary {
  for my $fn (glob("group_vars/*.yml")) {
    my $y = LoadFile($fn) || die "loading YAML $fn: $!\n";
    if($y->{cluster_members}->[0]->{name} eq hostname()) {
      return 1;
    }
  }
  return 0;
}
