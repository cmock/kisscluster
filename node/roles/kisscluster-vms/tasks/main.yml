# -*- yaml -*-
---

# this is ugly, but how to find it for roles included from role_path?
- name: run the inventory helper
  command: "{{_original_file|regex_replace('/[^/]+/[^/]+$', '')}}/helpers/kisscluster-vm-inventory {{vm_config_dir}}/{{cluster_name}}"
#  debug: msg="{{_original_file|regex_replace('/[^/]+/[^/]+$', '')}}/helpers/kisscluster-vm-inventory {{vm_config_dir}}"
  delegate_to: localhost
  run_once: true
  sudo: false

- name: include the variables
  include_vars: "{{vm_config_dir}}/{{cluster_name}}.yml"

# create LV
- name: create root logical volumes
  lvol: vg=vmvg lv={{item.name}}_root size={{item.root_disk_size}}
  with_items: active_vm
  register: lvol_create

# those need to be present for the create-md step below
- name: create DRBD resource config
  template: src=drbd-vm.res.j2 dest=/etc/drbd.d/{{item.name}}.res
    owner=root group=root mode=0444 backup=yes
  with_items: active_vm

# fail early, fail often...
- name: check drbd config
  command: /sbin/drbdadm sh-nop

# the lvol module can try and resize to the same size, and fail...
- name: create additional logical volumes
  lvol: vg=vmvg lv={{item.0.name}}_{{item.1.name}} size={{item.1.size}}
  with_subelements:
    - active_vm # item.0
    - more_disks     # item.1
  register: more_disks_create
  ignore_errors: true

#- debug: var=lvol_create
  
- name: initialize LVs for DRBD
  shell: /sbin/drbdadm create-md {{item.item.name}} < /dev/null
  with_items: lvol_create.results
  when: lvol_create.changed and item.changed

  # this needs to be run when more_disks are added later, but not when created
  # initially as part of the DRBD resource...
# - name: initialize more_disks DRBD metadata
#   shell: /sbin/drbdmeta {{item.item.1.drbd_minor}} v08 /dev/vmvg/{{item.item.0.name}}_{{item.item.1.name}} internal create-md < /dev/null
#   with_items: more_disks_create.results
#   when: more_disks_create.changed and item.changed
  
# need this before the initial sync...
- name: drbdadm adjust all, for good measure
  command: /sbin/drbdadm adjust all
  
- name: initial sync on DRBD resources
  shell: /sbin/drbdadm primary --force {{item.item.name}} < /dev/null
  with_items: lvol_create.results
  when: lvol_create.changed and item.changed and item.item.primary_on == inventory_hostname

# create VM service
- name: disable outdated service files
  command: /bin/systemctl disable vm@{{item.name}}.service
  with_items: disabled_vm

- name: create VM config
  template: src=vm.conf.{{item.template}}.j2 dest=/etc/vm/{{item.name}}.conf
    owner=root group=adm mode=0440 backup=yes
  with_items: active_vm
  
- name: enable VM service files
  command: /bin/systemctl reenable vm@{{item.name}}.service
  with_items: active_vm

- name: mkdir primary-vms.target.wants
  file: dest=/etc/systemd/system/primary-vms.target.wants
    state=directory owner=root group=root mode=0755
  
- name: setup primary-vms
  file: src=/etc/systemd/system/vm@.service
    dest=/etc/systemd/system/primary-vms.target.wants/vm@{{item.name}}.service
    state=link
  with_items: active_vm
  when: item.primary_on == inventory_hostname

- name: mkdir primary-vms.target.conflicts
  file: dest=/etc/systemd/system/primary-vms.target.conflicts
    state=directory owner=root group=root mode=0755
  
- name: setup primary-vms
  file: src=/etc/systemd/system/vm@.service
    dest=/etc/systemd/system/primary-vms.target.conflicts/vm@{{item.name}}.service
    state=link
  with_items: active_vm
  when: item.primary_on != inventory_hostname

# copy <cluster>.yml to /etc/vms for kiss-migrate
- name: copy cluster.yml for kiss-migrate
  copy: dest=/etc/vm/vms.yml
    src="{{vm_config_dir}}/{{cluster_name}}.yml"
    owner=root group=root mode=0444
  
- name: systemctl daemon-reload
  command: /bin/systemctl daemon-reload
  