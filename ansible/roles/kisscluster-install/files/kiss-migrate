#!/usr/bin/perl -w
use strict;
use IO::Socket::UNIX;
use Config::Tiny;
use IPC::System::Simple qw(systemx capturex runx EXIT_ANY);
use Net::OpenSSH;
use Getopt::Long;
use YAML qw(LoadFile DumpFile);
use Sys::Hostname;
use Data::Dumper;

my $usage = "usage: $0 [--all] | [--or-shutdown] vm-name
  Migrates a VM away from this host, or all when --all is given.
  --primary, --secondary migrate the primary/secondary VMs.
  --or-shutdown tries to migrate the VM, shuts it down on failure.
";

my $iproute = '/sbin/ip';
my $systemctl = '/bin/systemctl';
my $drbdadm = '/sbin/drbdadm';
my $kiss_vm_monitor = '/usr/sbin/kiss-vm-monitor';
my $kisscluster_conf = '/etc/kissclusterd.conf';
my $vm_list = '/etc/vm/vms.yml';
my $hostname = hostname();

$SIG{TERM} = \&term_handler();

# check for access to other host
my $other = get_other_ipaddr();

my($run_all, $run_primary, $run_secondary, $or_shutdown, $dry_run) = (0,0,0,0,0);
GetOptions("all" => \$run_all,
	   "primary" => \$run_primary,
	   "secondary" => \$run_secondary,
	   "dry-run" => \$dry_run,
	   "or-shutdown" => \$or_shutdown) || die $usage;

if(($run_all + $run_primary + $run_secondary) > 1) {
  die "--all, --primary, --secondary are mutually exclusive.\n\n$usage";
}

my $ssh = Net::OpenSSH->new($other);
if($ssh->error) {
  warn "ssh problem: " . $ssh->error;
  if(!$or_shutdown) {
    exit(1);
  }
}
if(!($run_all || $run_primary || $run_secondary) && !@ARGV) {
  warn "Need either --all/primary/secondary or a VM name\n";
  die $usage;
}

my $vms = LoadFile($vm_list);

if($run_all) {
  for my $vm (@{$vms->{active_vm}}) {
    push(@ARGV, $vm->{name});
  }
} elsif($run_primary) {
  for my $vm (@{$vms->{active_vm}}) {
    $vm->{primary_on} eq $hostname || next;
    push(@ARGV, $vm->{name});
  }
} elsif($run_secondary) {
  for my $vm (@{$vms->{active_vm}}) {
    $vm->{primary_on} eq $hostname && next;
    push(@ARGV, $vm->{name});
  }
}

for my $vm (@ARGV) {
  if($ssh->error && $or_shutdown) {
    runx(EXIT_ANY, $kiss_vm_monitor, $vm, 'powerdown');
  } elsif(!migrate($vm) && $or_shutdown) {
    runx(EXIT_ANY, $kiss_vm_monitor, $vm, 'powerdown');
  }
}

sub migrate {
  my $vm = shift;

  if($dry_run) {
    print "migrate($vm)\n";
    return 1;
  }

  my @rollback;

  # is it even running?
  my $exitval = capturex(EXIT_ANY, $systemctl, 'is-active', "vm\@$vm.service");
  if($exitval !~ /^active|deactivating/) {
    warn "VM $vm is not currently running: $exitval.\n";
    return undef;
  }

  # actually calling the "net-options" command here can fail when the connection
  # is not up; "adjust" seems to work...
  unshift(@rollback, { both => [$drbdadm, 'adjust', $vm] });
  unless(on_both($drbdadm, 'net-options', '--protocol=C',
		 '--allow-two-primaries', $vm)) {
    rollback(\@rollback, $vm);
    return undef;
  }

  # start on B with added params:
  # -incoming tcp:0:port
  # create /run/kvm/$vm.conf on other...
  unshift(@rollback, { other => [ '/bin/rm', "-f", "/run/kvm/$vm.conf" ] });
  unless(ssh_system({stdin_data => "TMP_QEMU_PARAMS=-incoming tcp:$other:1234"},
		    "cat > /run/kvm/$vm.conf")) {
    warn "VM $vm: cannot create /run/kvm/$vm.conf on other\n";
    rollback(\@rollback, $vm);
    return undef;
  }

  # drbdadm primary on both nodes
  # AFTER we creatd the /run/kvm/$vm.conf, because of possible races
  # when the other tries to start the VM
  unshift(@rollback, { other => [ $drbdadm, 'secondary', $vm ] });
  unless(on_both($drbdadm, 'primary', $vm)) {
    rollback(\@rollback, $vm);
    return undef;
  }

  unshift(@rollback, { other => [ $systemctl, 'stop', "vm\@$vm.service" ] });
  unless(ssh_system($systemctl, 'start', "vm\@$vm.service")) {
    warn "VM $vm: cannot start receiving instance on other\n";
    rollback(\@rollback, $vm);
    return undef;
  }

  ## now it takes some time for the remote VM to be ready...
  warn "VM $vm: giving remote some time to come up...\n";
  sleep(10);

  # in monitor:
  # migrate tcp:remote-addr:port
  my $mon;
  unless($mon = IO::Socket::UNIX->new(Type => SOCK_STREAM(),
				      Peer => "/run/kvm/$vm.mon")) {
    warn "VM $vm: error creating monitor socket /run/kvm/$vm.mon: $!\n";
    rollback(\@rollback, $vm);
    return undef;
  }
  print $mon "migrate_set_capability auto-converge on\n";
  print $mon "migrate_set_capability xbzrle on\n";
  print $mon "migrate tcp:$other:1234\n";
  while(<$mon>) {
    s/\r?\n$//;
    print "VM $vm: mon1 <$_>\n";
    next if /^QEMU.*monitor/; # welcome line
    last if /migrate tcp:$other:1234/; # echo of command;
				# only comes back when finished
  }
  print "VM $vm: done?\n";
  print $mon "info migrate\n";
  my($status, $time);
  while(<$mon>) {
    s/\r?\n$//;
    print "VM $vm: mon2 <$_>\n";
    if(/Migration status:\s+(.*)$/) {
      $status = $1;
    }
    if(/total time:\s+(\d+)\s+milliseconds/) {
      $time = $1;
      last; # end of output
    }
  }
  if($status eq 'failed') {
    warn "VM $vm: migrate command failed\n";
    rollback(\@rollback, $vm);
    return undef;
  }
  # success. no rollback from this point on!

  print "VM $vm: sending quit and waiting a bit\n";
  print $mon "quit\n";
  sleep(10);
  close($mon);
  undef @rollback;
  runx(EXIT_ANY, $drbdadm, 'secondary', $vm);
  on_both($drbdadm, 'adjust', $vm);
  return 1;
}


# return a hash keyed by all local ip addresses
sub get_other_ipaddr {
  my @res = qx|$iproute addr show|;
  my %myaddrs;

  foreach (@res) {
    /^\s+inet ([\d\.]+)\/\d+/ || next;
    $myaddrs{$1}++;
  }

  my $cfg = Config::Tiny->read('/etc/kissclusterd.conf') ||
    die "open $kisscluster_conf: $!\n";
  my @addrs = split(/\s+/, $cfg->{_}->{stor_addrs});
  my @oaddrs;
  for (@addrs) {
    push(@oaddrs, $_) unless defined $myaddrs{$_};
  }
  if(scalar(@oaddrs) != 1) {
    die "could not find other's stor_addr from $kisscluster_conf\n";
  }
  $oaddrs[0];
}

sub ssh_system {
  my $ex = $ssh->system(@_);
  unless($ex) {
    warn "ssh: $ssh->error\n";
  }
  $ex;
}

sub on_both {
  my $exitval = runx(EXIT_ANY, @_);
  if($exitval) {
    warn "problem with command on localhost.\n";
    warn "Command: ", join(" ", @_), "\n";
    return undef;
  }
  unless(ssh_system(@_)) {
    warn "problem with command on other.\n";
    warn "Command: ", join(" ", @_), "\n";
    return undef;
  }
  return 1;
}

sub rollback {
  my($rb, $vm) = @_;

  for my $action (@$rb) {
    for my $where (qw(both other here)) {
      next unless exists $action->{$where};
      warn "VM $vm: ROLLBACK $where " . join(" ", @{$action->{$where}}) . "\n";
      if($where eq 'both') {
	on_both(@{$action->{both}});
      } elsif($where eq 'other') {
	ssh_system(@{$action->{$where}});
      } elsif($where eq 'here') {
	runx(EXIT_ANY, @{$action->{$where}});
      }
    }
    warn "VM $vm: ROLLBACK waiting a bit...\n";
    sleep(5);
  }
}

# let's ignore SIGTERM as sent by systemd on --or-shutdown when the main
# qemu process exits...
sub term_handler {
  warn "term_handler called\n";
}
